name: ci-cd

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ${{ secrets.DOCR_REGISTRY }} # e.g. registry.digitalocean.com/your-registry
      REPO:     ${{ secrets.DOCR_REPO }}     # e.g. checkin
      IMAGE_WEB:    ${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}/checkin-web:${{ github.sha }}
      IMAGE_WORKER: ${{ secrets.DOCR_REGISTRY }}/${{ secrets.DOCR_REPO }}/checkin-worker:${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DOCR
        run: |
          echo "${{ secrets.DOCR_PASSWORD }}" | docker login ${{ secrets.DOCR_REGISTRY }} -u "${{ secrets.DOCR_USERNAME }}" --password-stdin

      - name: Build & push images
        run: |
          docker build -f docker/Dockerfile.web   -t "$IMAGE_WEB" .
          docker push "$IMAGE_WEB"
          docker build -f docker/Dockerfile.worker -t "$IMAGE_WORKER" .
          docker push "$IMAGE_WORKER"

      - name: Upload deploy bundle to droplet
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          source: |
            docker-compose.prod.yml
            caddy/Caddyfile
          target: /opt/checkin

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SSH_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -e
            cd /opt/checkin
            echo DOMAIN=${{ secrets.DOMAIN }} > .env.production
            echo CADDY_EMAIL=${{ secrets.CADDY_EMAIL }} >> .env.production
            echo NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }} >> .env.production
            echo AUTH_SECRET=${{ secrets.AUTH_SECRET }} >> .env.production
            echo BCRYPT_ROUNDS=12 >> .env.production
            echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env.production
            echo REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }} >> .env.production
            echo REDIS_URL=redis://:${{ secrets.REDIS_PASSWORD }}@redis:6379 >> .env.production
            echo IMAGE_WEB=${{ env.IMAGE_WEB }} >> .env.production
            echo IMAGE_WORKER=${{ env.IMAGE_WORKER }} >> .env.production

            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

            # Run DB migrations
            docker compose -f docker-compose.prod.yml exec -T web npx prisma migrate deploy