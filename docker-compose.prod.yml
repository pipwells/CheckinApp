services:
  reverse-proxy:
    image: caddy:2
    restart: unless-stopped
    command: ["caddy","run","--config","/etc/caddy/Caddyfile","--adapter","caddyfile"]
    ports:
      - "80:80"
      - "443:443"
    env_file:
      - ./.env.production
    environment:
      DOMAIN: ${DOMAIN}
      CADDY_EMAIL: ${CADDY_EMAIL}
    volumes:
      - /opt/checkin/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - web

  web:
    image: ${IMAGE_WEB:-checkin/web:dev}
    restart: unless-stopped
    env_file:
      - ./.env.production
    environment:
      NODE_ENV: production
      PORT: "3000"
    expose:
      - "3000"
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/healthz"]
      interval: 15s
      timeout: 5s
      retries: 5

  worker:
    image: ${IMAGE_WORKER:-checkin/worker:dev}
    restart: unless-stopped
    env_file:
      - ./.env.production
    environment:
      NODE_ENV: production
    depends_on:
      - redis

  redis:
    image: redis:7-alpine
    command: >
      sh -c "redis-server --requirepass $$REDIS_PASSWORD
             --appendonly yes --appendfsync everysec
             --save 900 1 --save 300 10 --save 60 10000"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a \"$REDIS_PASSWORD\" PING"]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  caddy_data:
  caddy_config:
  redis-data:
